<?php

/**
 * @file
 * The Aarsberetning Admin module contains functions which changes standard
 * behavior of core modules.
 */

function aarsb_admin_menu() {
  $items = array();

  $items['ajax/%'] = array(
    'title' => 'Ajax test',
    'description' => 'Ajax callback test.',
    'page callback' => 'aarsb_admin_ajax',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function aarsb_admin_ajax($nid) {
  if (!is_numeric($nid)) {
    $nid = substr(drupal_get_normal_path($nid), 5);
  }

  $node = node_load($nid);
  $node_array = node_view($node, $view_mode = 'full');

  $data = array();
  foreach ($node_array as $key => $value) {
    if (strstr($key, 'field_')) {
      $data[$key] = drupal_render($node_array[$key]);
    }
  }

  $data['image'] = FALSE;
  // Get active image an return information.
  $image = dynamic_background_active_image('node', $nid);
  if ($image) {
    // Load image style settings.
    $image_style = variable_get('dynamic_background_node_image_style', FALSE);
    if ($image_style && $image_style['style']) {
      // Image style found, so update the image path with an image style
      // based one.
      $image->uri = image_style_path($image_style['style'], $image->uri);
    }
    $data['image'] = file_create_url($image->uri);
  }

  return drupal_json_output($data);
}


/**
 * Copy from dynamic background, which is modified to return the css as a single
 * string that can be used as inline style.
 *
 * @param array $images_conf
 * @param boolean $reset optional
 * @return string $css or FALSE if custom CSS have not been defined
 */
function aarsberetning_build_background_style($images_conf, $reset = FALSE) {
  static $css;
  if (!isset($css) || $reset) {
    // Build style array based on weight, this will allow weight base override
    // at the same time allowing different selectors.
    $style_array = array();
    foreach ($images_conf as $image_conf) {
      // Add image style, if one have been defined.
      $image = $image_conf['image'];
      if (isset($image_conf['image_style']) && $image_conf['image_style']) {
        // Image style found, so update the image path with an image style
        // based one.
        $image->uri = image_style_path($image_conf['image_style'], $image->uri);
      }

      // Only use image if css behaviour have be set.
      if (!empty($image_conf['configuration'])) {
        // Check if selector have been used, if it have and has a higher weight
        // override it.
        if (isset($style_array[$image_conf['configuration']['selector']])) {
          if ($style_array[$image_conf['configuration']['selector']]['weight'] > $image_conf['weight']) {
            $style_array[$image_conf['configuration']['selector']] = array(
              'css' => $image_conf['configuration']['css'],
              'image' => $image,
              'weight' => $image_conf['weight'],
            );
          }
        }
        else {
          $style_array[$image_conf['configuration']['selector']] = array(
            'css' => $image_conf['configuration']['css'],
            'image' => $image,
            'weight' => $image_conf['weight'],
          );
        }
      }
    }

    // Build css based on weighted style array.
    $css = '';
    foreach ($style_array as $selector => $style) {
      $css .= file_create_url($style['image']->uri);
    }
  }
  return $css;
}

/**
 * Implements hook_image_styles_alter().
 *
 * Change image styles.
 */
function aarsb_admin_image_styles_alter(&$styles) {

  if (isset($styles['medium'])) {
    $styles['medium']['effects'][0]['data']['width'] = 150;
    $styles['medium']['effects'][0]['data']['height'] = 150;
  }

  if (isset($styles['large'])) {
    $styles['large']['effects'][0]['data']['width'] = 325;
    $styles['large']['effects'][0]['data']['height'] = 325;
  }

}

/**
 * Implements hook_form_alter().
 *
 * @param string $form
 * @param type $form_state
 * @param type $form_id
 */
function aarsb_admin_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'page_node_form') {
    $form['#after_build'][] = '_node_form_alter';
  }
}

/**
 * Function called after form is rendered.
 * Makes altering the forms element possible.
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function _node_form_alter($form, &$form_state) {
  if (array_key_exists('und', $form['language']['#options'])) {
    //Removes the "Language neutral option from the Language selector
    unset($form['language']['#options']['und']);
  }
  return $form;
}